#version 450
layout (local_size_x = 32, local_size_y = 32) in;

layout (set = 0,binding = 0) uniform sampler2D _RG_gbuf_pos;
layout (set = 0,binding = 1) uniform sampler2D _RG_gbuf_normal;
layout (set = 0,binding = 2) uniform sampler2D _txBluenoise;

layout (set = 0,binding = 3, r8) uniform writeonly image2D resultImage;

//const int SSAO_KERNEL_SIZE = 16;
const float SSAO_RADIUS = 50.f;
layout (constant_id = 0) const int SSAO_KERNEL_SIZE = 64;
//layout (constant_id = 1) const float SSAO_RADIUS = 0.5;

layout (set = 0,binding = 4) uniform UBOSSAOKernel
{
	vec4 samples[SSAO_KERNEL_SIZE];
} uboSSAOKernel;

layout(set = 0, binding = 5) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 projection;
	mat4 inv_model;
    mat4 inv_view;
    mat4 inv_proj;
	vec4 eye;
} ubo;

//layout (location = 0) in vec2 inUV;

//layout (location = 0) out float outFragColor;
//layout (location = 0) out  outFragColor;


float rand2D(in vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}
const float NEAR_PLANE = 0.1f; //todo: specialization const
const float FAR_PLANE =  50000.0f; //todo: specialization const 
float linearDepth(float depth)
{
	float z = ((1-depth) * 2.0f - 1.0f); 
	//float DistPlanes = FAR_PLANE - NEAR_PLANE;
	//return NEAR_PLANE + DistPlanes * depth;
	return (2.0f * NEAR_PLANE * FAR_PLANE) / (FAR_PLANE + NEAR_PLANE - z * (FAR_PLANE - NEAR_PLANE));
}
float linearize_depth(float d)
{
    return NEAR_PLANE * FAR_PLANE / (FAR_PLANE + d * (NEAR_PLANE - FAR_PLANE));
}

float getSampleDepth(in vec2 uv){
	return linearize_depth(1-texture(_RG_gbuf_pos, uv).w);
}
void main() 
{
	ivec2 dim = imageSize(resultImage);	
	float outFragColor;
	if(gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y){

	
	vec2 inUV = vec2(gl_GlobalInvocationID.xy) / dim;
	
	vec2 inUV_warped = ((inUV * 2.f) - vec2(1.f)) * texture(_RG_gbuf_pos, inUV).w;

	vec3 fpos = vec3(inUV_warped.x,inUV_warped.y,texture(_RG_gbuf_pos, inUV).w );

	vec3 gpos = texture(_RG_gbuf_pos, inUV).rgb;

	vec4 gfrag = (ubo.inv_proj *vec4(gpos,1.f)); 
	
	vec3 fragPos = (ubo.inv_proj *vec4(fpos,1.f)).xyz; 
	
	vec3 normal = normalize(texture(_RG_gbuf_normal, inUV).rgb * 2.0 - 1.0);

	// Get a random vector using a noise lookup
	ivec2 texDim = textureSize(_RG_gbuf_pos, 0); 
	ivec2 noiseDim = textureSize(_txBluenoise, 0);
	const vec2 noiseUV = vec2(float(texDim.x)/float(noiseDim.x), float(texDim.y)/(noiseDim.y)) * inUV;

    vec3 randomVec = texture(_txBluenoise, noiseUV).xyz * 2.0 - 1.0;
	
	// Create TBN matrix
	vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
	vec3 bitangent = cross(tangent, normal);

	mat3 TBN = mat3(tangent, bitangent, normal);

	// Calculate occlusion value
	float occlusion = 0.0f;
	// remove banding
	const float bias = 5.f;
	float tst;
	for(int i = 0; i < SSAO_KERNEL_SIZE; i++)
	{		
		//int i = 0;
		vec3 samplePos = TBN*uboSSAOKernel.samples[i].xyz; 
		samplePos = fragPos + samplePos * SSAO_RADIUS; 
		
		// project
		vec4 offset = vec4(samplePos, 1.0f);
		offset = ubo.projection * offset; 
		offset.xyz /= offset.w; 
		offset.xyz = offset.xyz * 0.5f + 0.5f; 
		
		float sampleDepth = getSampleDepth(offset.xy);//-linearDepth(1-getSampleDepth(offset.xy)); 
		tst = sampleDepth;//samplePos.z;//getSampleDepth(offset.xy);
#define RANGE_CHECK 0
#ifdef RANGE_CHECK
		// Range check
		float rangeCheck = smoothstep(0.0f, 1.0f, SSAO_RADIUS / abs(fpos.z - sampleDepth));
		occlusion += (sampleDepth >= samplePos.z + bias ? 1.0f : 0.0f) * rangeCheck;           
#else
		occlusion += (sampleDepth >= samplePos.z + bias ? 1.0f : 0.0f);  
#endif
	}
	//occlusion *= 2;
	//occlusion = clamp( 1.0 - (occlusion / float(SSAO_KERNEL_SIZE)) ,0.f,1.f );

	//if(abs(fragPos.z) > 2000){
	//	outFragColor = 1.f;
	//}
	//else{
		outFragColor =  occlusion;
	//}	

	 vec3 gf = (gfrag / gfrag.w).xyz;
	outFragColor = sin(linearDepth(texture(_RG_gbuf_pos, inUV).w)) - sin((gf.z*FAR_PLANE));
	//outFragColor = sin((gf.z*FAR_PLANE));
	//outFragColor = sin((tst - fragPos.z)*100 );
	//outFragColor = sin(gf.z*FAR_PLANE);
	//outFragColor = sin(tst );
	//outFragColor = (sin((gpos.z*FAR_PLANE)));
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(1.f));
	}
}

