#version 450
layout (local_size_x = 32, local_size_y = 32) in;

layout(push_constant) uniform PushConsts{
	vec2  g_InvResolutionDirection; // either set x to 1/width or y to 1/height
	float g_Sharpness;
	float KERNEL_RADIUS;
};

const float KERNEL_RAD = 5;

layout(binding=0) uniform sampler2D texSource;
layout(binding=1) uniform sampler2D texLinearDepth;
layout (set = 0,binding = 3, r8) uniform writeonly image2D resultImage;

//-------------------------------------------------------------------------

vec4 BlurFunction(vec2 uv, float r, vec4 center_c, float center_d, inout float w_total)
{
  vec4  c = texture( texSource, uv );
  float d = texture( texLinearDepth, uv).w / 50000.f;
  
  const float BlurSigma = float(KERNEL_RAD) * 0.5;
  const float BlurFalloff = 1.0 / (2.0*BlurSigma*BlurSigma);
  
  float ddiff = (d - center_d) * g_Sharpness * 10;
  float w = exp2(-r*r*BlurFalloff - ddiff*ddiff);
  w_total += w;

  return c*w;
}

void main()
{
  ivec2 dim = imageSize(resultImage);	
  float outFragColor;
    if(gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y){

      vec2 texCoord = vec2(gl_GlobalInvocationID.xy) / dim;
      vec4  center_c = texture( texSource, texCoord );
      float center_d = texture( texLinearDepth, texCoord).w / 50000.f;
      
      vec4  c_total = center_c;
      float w_total = 1.0;
      
      for (float r = 1; r <= KERNEL_RAD; ++r)
      {
        vec2 uv = texCoord + (g_InvResolutionDirection * r);
        c_total += BlurFunction(uv, r, center_c, center_d, w_total);  
      }

      for (float r = 1; r <= KERNEL_RAD; ++r)
      {
        vec2 uv = texCoord + (g_InvResolutionDirection * r * -1);
        c_total += BlurFunction(uv, r, center_c, center_d, w_total);  
      }

      outFragColor = (c_total/w_total).r;

      imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(outFragColor));
  } 
}
